#pragma once
#include <iostream>
#include "Inventory.h"
#include "Items.h"
#include "Player.h"
#include <string>
using namespace std;



class Enemy {
private:
	int health, strength, smarts, dexterity, type, maxHealth;
	inventory* EnemyInv;
	Enemy* next;
	Enemy* last;
	string name;
public:
	Enemy(int muscles, int intelligence, int dex, int typ, int maxH, string nme, inventory* inv) {
		strength = muscles;
		smarts = intelligence;
		dexterity = dex;
		type = typ;
		maxHealth = maxH;
		health = maxH;
		EnemyInv = inv;
		name = nme;
	}
	Enemy* getNext() {
		return next;
	}
	Enemy* setName(string nam) {
		name = nam;
	}
	string getName() {
		return name;
	}
	void setNext(Enemy* nxt) {
		next = nxt;
	}
	Enemy* getLast() {
		return last;
	}
	void setLast(Enemy* lst) {
		last = lst;
	}
	int getType() {
		return type;
	}
	void setHealth(int h) {
		health = h;
	}
	void setStrength(int s) {
		strength = s;
	}
	void setSmarts(int s) {
		smarts = s;
	}
	void setDexterity(int d) {
		dexterity = d;
	}
	int getHealth() {
		return health;
	}
	int getStrength() {
		return strength;
	}
	int getSmarts() {
		return smarts;
	}
	int getDexterity() {
		return dexterity;
	}
	void changeHand(int id) {
		item* swapto = EnemyInv->search(id);
		if (swapto == NULL) {
			cout << "item does not exist." << endl;
		}
		else if (swapto->getCount() <= 0) {
			cout << "You dont have the target item." << endl;
		}
		else {
			EnemyInv->setCurrent(swapto);
		}
	}
	item* getHand() {
		return EnemyInv->getCurrent();
	}

	inventory* getInventory() {
		return EnemyInv;
	}
	void setInventory(inventory* newInv) {
		EnemyInv = newInv;
	}
	int getMaxHealth() {
		return maxHealth;
	}
	void displayStuff() {
		cout << "Name: " << getName() << ", Strength: " << getStrength() << ", intelligence: " << getSmarts() << ", dex: " << getDexterity() << ", max health: " << getHealth() << ", Inventory: ";
		EnemyInv->display();
	}
	//void useItem(item* itm, Player* pler) {

	//????int id = itm->getID();
	//????if (id == 1) {//half broken dagger
	//??????????cout << getName() << "used half broken dagger" << endl;
	//??????????int randDamage = 1 + rand() % 3;
	//??????????int damage = getStrength() + randDamage;
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " stabbed you for " << damage << " damage." << endl;
	//????}

	//????else if (id == 2) {//Dried Fish
	//??????????cout << getName() << " used dried fish" << endl;
	//??????????int randDamage = 7;
	//??????????int damage = getStrength() + randDamage;
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " force fed you for " << damage << " damage." << endl;
	//????}

	//????else if (id == 3) {//Cactus Sword
	//??????????cout << getName() << " used cactus sword" << endl;
	//??????????int randDamage = 3 + rand() % 5;
	//??????????int damage = getDexterity() + randDamage;
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " poked you for " << damage << " damage." << endl;
	//????}

	//????else if (id == 4) {//Blunderbuss
	//??????????cout << getName() << " used blunderbuss" << endl;
	//??????????int randDamage = 10;
	//??????????int damage = getSmarts() + randDamage;
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " aimed and shot you for " << damage << " damage." << endl;
	//????}

	//????else if (id == 5) {//Picture of Mom
	//??????????cout << getName() << " used photo of mother" << endl;
	//??????????int randDamage = 6 + rand() % 4;
	//??????????int damage = getSmarts() + randDamage;
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " showed you a picture of your mom for " << damage << " damage." << endl;
	//????}

	//????else if (id == 6) { // basic health potion
	//??????????cout << getName() << " used basic health potion" << endl;
	//??????????int randHealing = 1 + rand() % 3;
	//??????????int hlth = randHealing;
	//??????????if ((getHealth() + hlth) > getMaxHealth()) {
	//????????????????setHealth(getMaxHealth());
	//????????????????cout << getName() << " is at max health." << endl;
	//??????????}
	//??????????else {
	//????????????????setHealth(getHealth() + hlth);
	//????????????????cout << getName() << " healed for " << hlth << " damage." << endl;
	//??????????}
	//??????????getInventory()->addItem(6, -1);
	//????}

	//????else if (id == 7) { // medium health potion
	//??????????cout << getName() << " used medium health potion" << endl;
	//??????????int randHealing = 4 + rand() % 4;
	//??????????int hlth = randHealing;
	//??????????if ((getHealth() + hlth) > getMaxHealth()) {
	//????????????????setHealth(getMaxHealth());
	//????????????????cout << getName() << " is at max health." << endl;
	//??????????}
	//??????????else {
	//????????????????setHealth(getHealth() + hlth);
	//????????????????cout << getName() << " healed for " << hlth << " damage." << endl;
	//????????????????getInventory()->addItem(7, -1);
	//??????????}
	//????}

	//????else if (id == 8) { // max health potion
	//??????????cout << getName() << " used max health potion." << endl;
	//??????????setHealth(getMaxHealth());
	//??????????getInventory()->addItem(8, -1);
	//????}

	//????else if (id == 9) {//Math test
	//??????????cout << getName() << " used math test" << endl;
	//??????????int damage = pler->getSmarts();
	//??????????pler->setHealth(pler->getHealth() - damage);
	//??????????cout << getName() << " gave a math test to you for " << damage << " damage." << endl;
	//????}
	//}
};
//int health, strength, smarts, dexterity, type, maxHealth;
//inventory* EnemyInv;
//Enemy* next;
//Enemy* last;
//string name;
